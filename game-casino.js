// game-casino.js
function playBlackjack(isTournament = false) {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    let playerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let dealerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let playerScore = playerCards.reduce((a, b) => a + b, 0);
    let dealerScore = dealerCards.reduce((a, b) => a + b, 0);

    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
        <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
        <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
        <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
        <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
    `;
    if (!historyStack.includes('playBlackjack')) {
        historyStack.push('playBlackjack');
    }
    profile.stats.blackjack_games++;
    checkQuests('play_blackjack');
    updateProfile();

    window.hit = function() {
        playerCards.push(Math.floor(Math.random() * 10) + 2);
        playerScore = playerCards.reduce((a, b) => a + b, 0);
        if (playerScore > 21) {
            showNotification('–ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòø');
            if (isTournament) showTournaments();
            else showGames();
            updateProfile();
        } else {
            document.getElementById('main-content').innerHTML = `
                <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
                <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
                <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
                <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
                <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
                <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
            `;
        }
    };

    window.stand = function() {
        while (dealerScore < 17) {
            dealerCards.push(Math.floor(Math.random() * 10) + 2);
            dealerScore = dealerCards.reduce((a, b) => a + b, 0);
        }
        document.getElementById('main-content').innerHTML = `
            <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
            <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
            <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
            <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards.join(', ')} (–°—É–º–º–∞: ${dealerScore})</p>
        `;
        if (dealerScore > 21 || playerScore > dealerScore) {
            const reward = Math.floor(50 * (1 + profile.level * 0.1));
            profile.coins += reward;
            profile.stats.game_wins++;
            let xp = profile.event && profile.event.effect === 'double_xp' ? 60 : 30;
            profile.xp += xp;
            showNotification(`–ü–æ–±–µ–¥–∞! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
            checkAchievements();
            checkLevelUp();
            if (isTournament) {
                const userScore = profile.tournament.scores.find(s => s.username === profile.username);
                userScore.score += 10;
                const now = Date.now();
                if (profile.tournament.end < now) {
                    const top3 = profile.tournament.scores.sort((a, b) => b.score - a.score).slice(0, 3);
                    if (top3[0].username === profile.username) profile.coins += 1000;
                    else if (top3[1]?.username === profile.username) profile.coins += 500;
                    else if (top3[2]?.username === profile.username) profile.coins += 200;
                    showNotification('–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–≥—Ä–∞–¥—ã üèÜ');
                }
            }
        } else if (playerScore === dealerScore) {
            showNotification('–ù–∏—á—å—è! ü§ù');
        } else {
            showNotification('–î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª üòø');
        }
        if (isTournament) showTournaments();
        else showGames();
        updateProfile();
    };
}

function playSlots() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const symbols = ['üçí', 'üçã', 'üçä', 'üíé', 'üîî'];
    let result = [];
    for (let i = 0; i < 3; i++) {
        setTimeout(() => {
            result.push(symbols[Math.floor(Math.random() * symbols.length)]);
            document.getElementById('slotResult').innerHTML = result.join(' | ');
            if (result.length === 3) {
                const win = result.every(s => s === result[0]);
                document.getElementById('slotOutcome').innerHTML = win ? '<p>–ü–æ–±–µ–¥–∞! +100 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>';
                if (win) {
                    const reward = Math.floor(100 * (1 + profile.level * 0.1));
                    profile.coins += reward;
                    profile.stats.game_wins++;
                    let xp = profile.event && profile.event.effect === 'double_xp' ? 40 : 20;
                    profile.xp += xp;
                    showNotification(`–ü–æ–±–µ–¥–∞ –≤ —Å–ª–æ—Ç–∞—Ö! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
                    checkAchievements();
                    checkLevelUp();
                }
                profile.stats.slot_games++;
                checkQuests('play_slots');
                updateProfile();
            }
        }, i * 1000);
    }
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–°–ª–æ—Ç—ã üé∞</h2>
        <p id="slotResult">‚è≥ | ‚è≥ | ‚è≥</p>
        <p id="slotOutcome">–ö—Ä—É—Ç–∏–º...</p>
    `;
    if (!historyStack.includes('playSlots')) {
        historyStack.push('playSlots');
    }
}

function playDice() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const playerRoll = Math.floor(Math.random() * 6) + 1;
    const botRoll = Math.floor(Math.random() * 6) + 1;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–æ—Å—Ç–∏ üé≤</h2>
        <p>–¢–≤–æ–π –±—Ä–æ—Å–æ–∫: ${playerRoll}</p>
        <p>–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: ${botRoll}</p>
        ${playerRoll > botRoll ? '<p>–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ</p>' : playerRoll === botRoll ? '<p>–ù–∏—á—å—è!</p>' : '<p>–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª üòø</p>'}
    `;
    if (!historyStack.includes('playDice')) {
        historyStack.push('playDice');
    }
    if (playerRoll > botRoll) {
        const reward = Math.floor(50 * (1 + profile.level * 0.1));
        profile.coins += reward;
        profile.stats.game_wins++;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 30 : 15;
        profile.xp += xp;
        showNotification(`–ü–æ–±–µ–¥–∞ –≤ –∫–æ—Å—Ç—è—Ö! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkAchievements();
        checkLevelUp();
    }
    profile.stats.dice_games++;
    checkQuests('play_dice');
    updateProfile();
}

function playRoulette() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const options = ['–ö—Ä–∞—Å–Ω–æ–µ', '–ß—ë—Ä–Ω–æ–µ', '–ó–µ–ª—ë–Ω–æ–µ'];
    const result = options[Math.floor(Math.random() * options.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–†—É–ª–µ—Ç–∫–∞ üé°</h2>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}</p>
        ${result === '–ö—Ä–∞—Å–Ω–æ–µ' ? '<p>–ü–æ–±–µ–¥–∞! +75 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>'}
    `;
    if (!historyStack.includes('playRoulette')) {
        historyStack.push('playRoulette');
    }
    if (result === '–ö—Ä–∞—Å–Ω–æ–µ') {
        const reward = Math.floor(75 * (1 + profile.level * 0.1));
        profile.coins += reward;
        profile.stats.game_wins++;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 50 : 25;
        profile.xp += xp;
        showNotification(`–ü–æ–±–µ–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkAchievements();
        checkLevelUp();
    }
    profile.stats.roulette_games++;
    checkQuests('play_roulette');
    updateProfile();
}

// –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ game-casino.js