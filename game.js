// game.js
function summonPet() {
    if (profile.coins >= 50) {
        profile.coins -= 50;
        profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1 });
        profile.stats.pets_summoned++;
        profile.xp += 10;
        showNotification('–ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–∑–≤–∞–Ω! üêæ +10 XP');
        checkAchievements();
        checkQuests('summon_pet');
        showPets();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function buyItem(item) {
    const costs = { '–ü–∏—Ç–æ–º–µ—Ü': 100, '–ü—Ä–µ–¥–º–µ—Ç': 50, '–ë—É—Å—Ç XP': 200 };
    if (profile.coins >= costs[item]) {
        profile.coins -= costs[item];
        if (item === '–ü–∏—Ç–æ–º–µ—Ü') {
            profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1 });
            profile.stats.pets_summoned++;
        } else if (item === '–ü—Ä–µ–¥–º–µ—Ç') {
            profile.items.push(`–ü—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            profile.stats.items_collected++;
        } else if (item === '–ë—É—Å—Ç XP') {
            profile.earn_boost += 0.5;
            setTimeout(() => profile.earn_boost -= 0.5, 3600000); // 1 —á–∞—Å
        }
        profile.xp += 20;
        showNotification(`–ö—É–ø–ª–µ–Ω ${item}! üéâ +20 XP`);
        checkAchievements();
        checkQuests('buy_item');
        showShop();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function playBlackjack() {
    let playerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let dealerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let playerScore = playerCards.reduce((a, b) => a + b, 0);
    let dealerScore = dealerCards.reduce((a, b) => a + b, 0);

    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
        <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
        <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
        <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
        <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
    `;
    if (!historyStack.includes('playBlackjack')) {
        historyStack.push('playBlackjack');
    }
    window.Telegram.WebApp.BackButton.show();
    profile.stats.blackjack_games++;
    checkQuests('play_blackjack');
    updateProfile();

    window.hit = function() {
        playerCards.push(Math.floor(Math.random() * 10) + 2);
        playerScore = playerCards.reduce((a, b) => a + b, 0);
        if (playerScore > 21) {
            showNotification('–ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòø');
            showGames();
            updateProfile();
        } else {
            document.getElementById('main-content').innerHTML = `
                <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
                <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
                <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
                <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
                <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
                <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
            `;
        }
    };

    window.stand = function() {
        while (dealerScore < 17) {
            dealerCards.push(Math.floor(Math.random() * 10) + 2);
            dealerScore = dealerCards.reduce((a, b) => a + b, 0);
        }
        document.getElementById('main-content').innerHTML = `
            <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
            <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
            <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
            <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards.join(', ')} (–°—É–º–º–∞: ${dealerScore})</p>
        `;
        if (dealerScore > 21 || playerScore > dealerScore) {
            profile.coins += 50;
            profile.stats.game_wins++;
            profile.xp += 30;
            showNotification('–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ +30 XP');
            checkAchievements();
        } else if (playerScore === dealerScore) {
            showNotification('–ù–∏—á—å—è! ü§ù');
        } else {
            showNotification('–î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª üòø');
        }
        updateProfile();
    };
}

function playSlots() {
    const symbols = ['üçí', 'üçã', 'üçä', 'üíé', 'üîî'];
    const result = [symbols[Math.floor(Math.random() * symbols.length)], symbols[Math.floor(Math.random() * symbols.length)], symbols[Math.floor(Math.random() * symbols.length)]];
    const win = result.every(s => s === result[0]);
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–°–ª–æ—Ç—ã üé∞</h2>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.join(' | ')}</p>
        ${win ? '<p>–ü–æ–±–µ–¥–∞! +100 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>'}
    `;
    if (!historyStack.includes('playSlots')) {
        historyStack.push('playSlots');
    }
    window.Telegram.WebApp.BackButton.show();
    if (win) {
        profile.coins += 100;
        profile.stats.game_wins++;
        profile.xp += 20;
        showNotification('–ü–æ–±–µ–¥–∞ –≤ —Å–ª–æ—Ç–∞—Ö! +100 –º–æ–Ω–µ—Ç üéâ +20 XP');
        checkAchievements();
    }
    profile.stats.slot_games++;
    checkQuests('play_slots');
    updateProfile();
}

function playDice() {
    const playerRoll = Math.floor(Math.random() * 6) + 1;
    const botRoll = Math.floor(Math.random() * 6) + 1;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–æ—Å—Ç–∏ üé≤</h2>
        <p>–¢–≤–æ–π –±—Ä–æ—Å–æ–∫: ${playerRoll}</p>
        <p>–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: ${botRoll}</p>
        ${playerRoll > botRoll ? '<p>–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ</p>' : playerRoll === botRoll ? '<p>–ù–∏—á—å—è!</p>' : '<p>–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª üòø</p>'}
    `;
    if (!historyStack.includes('playDice')) {
        historyStack.push('playDice');
    }
    window.Telegram.WebApp.BackButton.show();
    if (playerRoll > botRoll) {
        profile.coins += 50;
        profile.stats.game_wins++;
        profile.xp += 15;
        showNotification('–ü–æ–±–µ–¥–∞ –≤ –∫–æ—Å—Ç—è—Ö! +50 –º–æ–Ω–µ—Ç üéâ +15 XP');
        checkAchievements();
    }
    profile.stats.dice_games++;
    checkQuests('play_dice');
    updateProfile();
}

function playRoulette() {
    const options = ['–ö—Ä–∞—Å–Ω–æ–µ', '–ß—ë—Ä–Ω–æ–µ', '–ó–µ–ª—ë–Ω–æ–µ'];
    const result = options[Math.floor(Math.random() * options.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–†—É–ª–µ—Ç–∫–∞ üé°</h2>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}</p>
        ${result === '–ö—Ä–∞—Å–Ω–æ–µ' ? '<p>–ü–æ–±–µ–¥–∞! +75 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>'}
    `;
    if (!historyStack.includes('playRoulette')) {
        historyStack.push('playRoulette');
    }
    window.Telegram.WebApp.BackButton.show();
    if (result === '–ö—Ä–∞—Å–Ω–æ–µ') {
        profile.coins += 75;
        profile.stats.game_wins++;
        profile.xp += 25;
        showNotification('–ü–æ–±–µ–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ! +75 –º–æ–Ω–µ—Ç üéâ +25 XP');
        checkAchievements();
    }
    profile.stats.roulette_games++;
    checkQuests('play_roulette');
    updateProfile();
}

function playClicker() {
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–ª–∏–∫–µ—Ä üñ±Ô∏è</h2>
        <p>–ù–∞–∂–∏–º–∞–π –¥–ª—è –º–æ–Ω–µ—Ç!</p>
        <button class="action" onclick="profile.coins += 10; profile.xp += 5; showNotification('+10 –º–æ–Ω–µ—Ç! üí∞ +5 XP'); checkQuests('play_clicker'); updateProfile(); playClicker();">–ö–ª–∏–∫!</button>
    `;
    if (!historyStack.includes('playClicker')) {
        historyStack.push('playClicker');
    }
    window.Telegram.WebApp.BackButton.show();
    profile.stats.clicker_games++;
    updateProfile();
}

function startTreasureHunt() {
    const rewards = [50, 100, 150, 200];
    const reward = rewards[Math.floor(Math.random() * rewards.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â üîç</h2>
        <p>–°–æ–∫—Ä–æ–≤–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ! +${reward} –º–æ–Ω–µ—Ç</p>
    `;
    if (!historyStack.includes('startTreasureHunt')) {
        historyStack.push('startTreasureHunt');
    }
    window.Telegram.WebApp.BackButton.show();
    profile.coins += reward;
    profile.xp += 30;
    profile.stats.treasure_hunts++;
    showNotification(`–°–æ–∫—Ä–æ–≤–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ! +${reward} –º–æ–Ω–µ—Ç ü™ô +30 XP`);
    checkAchievements();
    checkQuests('treasure_hunt');
    updateProfile();
}

function spinWheel() {
    const rewards = [10, 50, 100, 0, 200, 500];
    const reward = rewards[Math.floor(Math.random() * rewards.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã üé°</h2>
        <p>–¢—ã –≤—ã–∏–≥—Ä–∞–ª: ${reward} –º–æ–Ω–µ—Ç!</p>
    `;
    if (!historyStack.includes('spinWheel')) {
        historyStack.push('spinWheel');
    }
    window.Telegram.WebApp.BackButton.show();
    profile.coins += reward;
    profile.xp += reward > 0 ? 20 : 5;
    profile.stats.roulette_games++;
    showNotification(`+${reward} –º–æ–Ω–µ—Ç! üéâ +${reward > 0 ? 20 : 5} XP`);
    checkAchievements();
    checkQuests('spin_wheel');
    updateProfile();
}

function earnCoins() {
    const coins = Math.floor(50 * (1 + profile.earn_boost));
    profile.coins += coins;
    profile.xp += 10;
    profile.stats.quests_completed++;
    showNotification(`+${coins} –º–æ–Ω–µ—Ç! üí∏ +10 XP`);
    checkQuests('earn_coins');
    showEarn();
    updateProfile();
}

function checkAchievements() {
    const achievements = [
        { id: 'first_pet', name: '–ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü', condition: () => profile.stats.pets_summoned >= 1 },
        { id: 'game_master', name: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä', condition: () => profile.stats.game_wins >= 5 },
        { id: 'quest_hunter', name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–≤–µ—Å—Ç–∞–º–∏', condition: () => profile.stats.quests_completed >= 3 }
    ];
    achievements.forEach(a => {
        if (a.condition() && !profile.achievements.includes(a.name)) {
            profile.achievements.push(a.name);
            profile.coins += 100;
            profile.xp += 50;
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${a.name}! +100 –º–æ–Ω–µ—Ç üéâ +50 XP`);
        }
    });
    updateProfile();
}

function startQuest() {
    const quests = [
        { id: 'play_blackjack', description: '–°—ã–≥—Ä–∞–π –≤ –±–ª–µ–∫–¥–∂–µ–∫ 3 —Ä–∞–∑–∞', goal: 3, reward: 100 },
        { id: 'play_slots', description: '–°—ã–≥—Ä–∞–π –≤ —Å–ª–æ—Ç—ã 5 —Ä–∞–∑', goal: 5, reward: 150 },
        { id: 'summon_pet', description: '–ü—Ä–∏–∑–æ–≤–∏ 2 –ø–∏—Ç–æ–º—Ü–µ–≤', goal: 2, reward: 200 }
    ];
    const available = quests.filter(q => !profile.quests[q.id]);
    if (available.length) {
        const quest = available[Math.floor(Math.random() * available.length)];
        profile.quests[quest.id] = { description: quest.description, progress: 0, goal: quest.goal, reward: quest.reward };
        showNotification(`–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${quest.description}!`);
        showQuests();
        updateProfile();
    } else {
        showNotification('–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    }
}

function checkQuests(type) {
    if (profile.quests[type]) {
        profile.quests[type].progress++;
        if (profile.quests[type].progress >= profile.quests[type].goal) {
            profile.coins += profile.quests[type].reward;
            profile.xp += 50;
            profile.stats.quests_completed++;
            showNotification(`–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${profile.quests[type].description}! +${profile.quests[type].reward} –º–æ–Ω–µ—Ç üéâ +50 XP`);
            delete profile.quests[type];
            checkAchievements();
        }
        updateProfile();
    }
}