// game.js
function summonPet() {
    const cost = profile.event && profile.event.effect === 'pet_discount' ? 25 : 50;
    if (profile.coins >= cost) {
        profile.coins -= cost;
        const rarities = ['–æ–±—ã—á–Ω—ã–π', '—Ä–µ–¥–∫–∏–π', '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'];
        const rarity = Math.random() < 0.1 ? (Math.random() < 0.5 ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π') : '–æ–±—ã—á–Ω—ã–π';
        profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: rarity });
        profile.stats.pets_summoned++;
        profile.xp += 10;
        showNotification(`–ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–∑–≤–∞–Ω (${rarity})! üêæ +10 XP`);
        checkAchievements();
        checkQuests('summon_pet');
        checkLevelUp();
        showPets();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function buyItem(item) {
    const costs = { '–ü–∏—Ç–æ–º–µ—Ü': profile.event && profile.event.effect === 'pet_discount' ? 50 : 100, '–ü—Ä–µ–¥–º–µ—Ç': 50, '–ë—É—Å—Ç XP': 200, '–°—É–Ω–¥—É–∫': 300 };
    const discount = Math.random() < 0.5 ? '–ü–∏—Ç–æ–º–µ—Ü' : '–ü—Ä–µ–¥–º–µ—Ç';
    if (discount === '–ü–∏—Ç–æ–º–µ—Ü') costs['–ü–∏—Ç–æ–º–µ—Ü'] = Math.floor(costs['–ü–∏—Ç–æ–º–µ—Ü'] * 0.8);
    if (discount === '–ü—Ä–µ–¥–º–µ—Ç') costs['–ü—Ä–µ–¥–º–µ—Ç'] = Math.floor(costs['–ü—Ä–µ–¥–º–µ—Ç'] * 0.8);
    if (profile.coins >= costs[item]) {
        profile.coins -= costs[item];
        if (item === '–ü–∏—Ç–æ–º–µ—Ü') {
            const rarities = ['–æ–±—ã—á–Ω—ã–π', '—Ä–µ–¥–∫–∏–π', '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'];
            const rarity = Math.random() < 0.1 ? (Math.random() < 0.5 ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π') : '–æ–±—ã—á–Ω—ã–π';
            profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: rarity });
            profile.stats.pets_summoned++;
        } else if (item === '–ü—Ä–µ–¥–º–µ—Ç') {
            profile.items.push(`–ü—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            profile.stats.items_collected++;
        } else if (item === '–ë—É—Å—Ç XP') {
            profile.earn_boost += 0.5;
            setTimeout(() => profile.earn_boost -= 0.5, 3600000);
        } else if (item === '–°—É–Ω–¥—É–∫') {
            const rewards = ['100 –º–æ–Ω–µ—Ç', '–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', '–ü–∏—Ç–æ–º–µ—Ü'];
            const reward = rewards[Math.floor(Math.random() * rewards.length)];
            if (reward === '100 –º–æ–Ω–µ—Ç') {
                profile.coins += 100;
            } else if (reward === '–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç') {
                profile.items.push(`–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            } else {
                profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: '—Ä–µ–¥–∫–∏–π' });
            }
            showNotification(`–ò–∑ —Å—É–Ω–¥—É–∫–∞ –≤—ã–ø–∞–ª–æ: ${reward}! üéÅ`);
        }
        profile.xp += 20;
        showNotification(`–ö—É–ø–ª–µ–Ω ${item}! üéâ +20 XP`);
        checkAchievements();
        checkQuests('buy_item');
        checkLevelUp();
        showShop();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function playBlackjack(isTournament = false) {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    let playerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let dealerCards = [Math.floor(Math.random() * 10) + 2, Math.floor(Math.random() * 10) + 2];
    let playerScore = playerCards.reduce((a, b) => a + b, 0);
    let dealerScore = dealerCards.reduce((a, b) => a + b, 0);

    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
        <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
        <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
        <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
        <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
    `;
    if (!historyStack.includes('playBlackjack')) {
        historyStack.push('playBlackjack');
    }
    profile.stats.blackjack_games++;
    checkQuests('play_blackjack');
    updateProfile();

    window.hit = function() {
        playerCards.push(Math.floor(Math.random() * 10) + 2);
        playerScore = playerCards.reduce((a, b) => a + b, 0);
        if (playerScore > 21) {
            showNotification('–ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòø');
            if (isTournament) showTournaments();
            else showGames();
            updateProfile();
        } else {
            document.getElementById('main-content').innerHTML = `
                <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
                <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
                <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
                <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards[0]}, ?</p>
                <button class="action" onclick="hit()">–í–∑—è—Ç—å –∫–∞—Ä—Ç—É</button>
                <button class="action" onclick="stand()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è</button>
            `;
        }
    };

    window.stand = function() {
        while (dealerScore < 17) {
            dealerCards.push(Math.floor(Math.random() * 10) + 2);
            dealerScore = dealerCards.reduce((a, b) => a + b, 0);
        }
        document.getElementById('main-content').innerHTML = `
            <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
            <h2>–ë–ª–µ–∫–¥–∂–µ–∫ üé¥</h2>
            <p>–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${playerCards.join(', ')} (–°—É–º–º–∞: ${playerScore})</p>
            <p>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCards.join(', ')} (–°—É–º–º–∞: ${dealerScore})</p>
        `;
        if (dealerScore > 21 || playerScore > dealerScore) {
            const reward = Math.floor(50 * (1 + profile.level * 0.1));
            profile.coins += reward;
            profile.stats.game_wins++;
            let xp = profile.event && profile.event.effect === 'double_xp' ? 60 : 30;
            profile.xp += xp;
            showNotification(`–ü–æ–±–µ–¥–∞! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
            checkAchievements();
            checkLevelUp();
            if (isTournament) {
                const userScore = profile.tournament.scores.find(s => s.username === profile.username);
                userScore.score += 10;
                const now = Date.now();
                if (profile.tournament.end < now) {
                    const top3 = profile.tournament.scores.sort((a, b) => b.score - a.score).slice(0, 3);
                    if (top3[0].username === profile.username) profile.coins += 1000;
                    else if (top3[1]?.username === profile.username) profile.coins += 500;
                    else if (top3[2]?.username === profile.username) profile.coins += 200;
                    showNotification('–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–≥—Ä–∞–¥—ã üèÜ');
                }
            }
        } else if (playerScore === dealerScore) {
            showNotification('–ù–∏—á—å—è! ü§ù');
        } else {
            showNotification('–î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª üòø');
        }
        if (isTournament) showTournaments();
        else showGames();
        updateProfile();
    };
}

function playSlots() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const symbols = ['üçí', 'üçã', 'üçä', 'üíé', 'üîî'];
    let result = [];
    for (let i = 0; i < 3; i++) {
        setTimeout(() => {
            result.push(symbols[Math.floor(Math.random() * symbols.length)]);
            document.getElementById('slotResult').innerHTML = result.join(' | ');
            if (result.length === 3) {
                const win = result.every(s => s === result[0]);
                document.getElementById('slotOutcome').innerHTML = win ? '<p>–ü–æ–±–µ–¥–∞! +100 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>';
                if (win) {
                    const reward = Math.floor(100 * (1 + profile.level * 0.1));
                    profile.coins += reward;
                    profile.stats.game_wins++;
                    let xp = profile.event && profile.event.effect === 'double_xp' ? 40 : 20;
                    profile.xp += xp;
                    showNotification(`–ü–æ–±–µ–¥–∞ –≤ —Å–ª–æ—Ç–∞—Ö! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
                    checkAchievements();
                    checkLevelUp();
                }
                profile.stats.slot_games++;
                checkQuests('play_slots');
                updateProfile();
            }
        }, i * 1000);
    }
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–°–ª–æ—Ç—ã üé∞</h2>
        <p id="slotResult">‚è≥ | ‚è≥ | ‚è≥</p>
        <p id="slotOutcome">–ö—Ä—É—Ç–∏–º...</p>
    `;
    if (!historyStack.includes('playSlots')) {
        historyStack.push('playSlots');
    }
}

function playDice() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const playerRoll = Math.floor(Math.random() * 6) + 1;
    const botRoll = Math.floor(Math.random() * 6) + 1;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–æ—Å—Ç–∏ üé≤</h2>
        <p>–¢–≤–æ–π –±—Ä–æ—Å–æ–∫: ${playerRoll}</p>
        <p>–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: ${botRoll}</p>
        ${playerRoll > botRoll ? '<p>–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ</p>' : playerRoll === botRoll ? '<p>–ù–∏—á—å—è!</p>' : '<p>–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª üòø</p>'}
    `;
    if (!historyStack.includes('playDice')) {
        historyStack.push('playDice');
    }
    if (playerRoll > botRoll) {
        const reward = Math.floor(50 * (1 + profile.level * 0.1));
        profile.coins += reward;
        profile.stats.game_wins++;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 30 : 15;
        profile.xp += xp;
        showNotification(`–ü–æ–±–µ–¥–∞ –≤ –∫–æ—Å—Ç—è—Ö! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkAchievements();
        checkLevelUp();
    }
    profile.stats.dice_games++;
    checkQuests('play_dice');
    updateProfile();
}

function playRoulette() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const options = ['–ö—Ä–∞—Å–Ω–æ–µ', '–ß—ë—Ä–Ω–æ–µ', '–ó–µ–ª—ë–Ω–æ–µ'];
    const result = options[Math.floor(Math.random() * options.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–†—É–ª–µ—Ç–∫–∞ üé°</h2>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}</p>
        ${result === '–ö—Ä–∞—Å–Ω–æ–µ' ? '<p>–ü–æ–±–µ–¥–∞! +75 –º–æ–Ω–µ—Ç üéâ</p>' : '<p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</p>'}
    `;
    if (!historyStack.includes('playRoulette')) {
        historyStack.push('playRoulette');
    }
    if (result === '–ö—Ä–∞—Å–Ω–æ–µ') {
        const reward = Math.floor(75 * (1 + profile.level * 0.1));
        profile.coins += reward;
        profile.stats.game_wins++;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 50 : 25;
        profile.xp += xp;
        showNotification(`–ü–æ–±–µ–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkAchievements();
        checkLevelUp();
    }
    profile.stats.roulette_games++;
    checkQuests('play_roulette');
    updateProfile();
}

function playClicker() {
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–ª–∏–∫–µ—Ä üñ±Ô∏è</h2>
        <p>–ù–∞–∂–∏–º–∞–π –¥–ª—è –º–æ–Ω–µ—Ç!</p>
        <button class="action" onclick="clickForCoins()">–ö–ª–∏–∫!</button>
    `;
    if (!historyStack.includes('playClicker')) {
        historyStack.push('playClicker');
    }
    profile.stats.clicker_games++;
    updateProfile();
}

function clickForCoins() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        playClicker();
        return;
    }
    profile.energy--;
    const reward = Math.floor(10 * (1 + profile.level * 0.1));
    profile.coins += reward;
    let xp = profile.event && profile.event.effect === 'double_xp' ? 10 : 5;
    profile.xp += xp;
    showNotification(`+${reward} –º–æ–Ω–µ—Ç! üí∞ +${xp} XP`);
    checkQuests('play_clicker');
    checkLevelUp();
    playClicker();
    updateProfile();
}

function playRockPaperScissors() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ‚úä‚úÇÔ∏èüìú</h2>
        <button class="action" onclick="playRPS('–∫–∞–º–µ–Ω—å')">–ö–∞–º–µ–Ω—å ‚úä</button>
        <button class="action" onclick="playRPS('–Ω–æ–∂–Ω–∏—Ü—ã')">–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è</button>
        <button class="action" onclick="playRPS('–±—É–º–∞–≥–∞')">–ë—É–º–∞–≥–∞ üìú</button>
    `;
    historyStack.push('playRockPaperScissors');
}

function playRPS(playerChoice) {
    const choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
    const botChoice = choices[Math.floor(Math.random() * choices.length)];
    let result = '';
    if (playerChoice === botChoice) {
        result = '–ù–∏—á—å—è! ü§ù';
    } else if (
        (playerChoice === '–∫–∞–º–µ–Ω—å' && botChoice === '–Ω–æ–∂–Ω–∏—Ü—ã') ||
        (playerChoice === '–Ω–æ–∂–Ω–∏—Ü—ã' && botChoice === '–±—É–º–∞–≥–∞') ||
        (playerChoice === '–±—É–º–∞–≥–∞' && botChoice === '–∫–∞–º–µ–Ω—å')
    ) {
        result = '–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üéâ';
        const reward = Math.floor(50 * (1 + profile.level * 0.1));
        profile.coins += reward;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 30 : 15;
        profile.xp += xp;
        showNotification(`–ü–æ–±–µ–¥–∞! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkLevelUp();
    } else {
        result = '–ü—Ä–æ–∏–≥—Ä—ã—à! üòø';
    }
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ‚úä‚úÇÔ∏èüìú</h2>
        <p>–¢–≤–æ–π –≤—ã–±–æ—Ä: ${playerChoice}</p>
        <p>–í—ã–±–æ—Ä –±–æ—Ç–∞: ${botChoice}</p>
        <p>${result}</p>
    `;
    updateProfile();
}

function playGuessNumber() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const number = Math.floor(Math.random() * 10) + 1;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üî¢</h2>
        <p>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:</p>
        <input id="guessInput" type="number" min="1" max="10">
        <button class="action" onclick="guessNumber(${number})">–£–≥–∞–¥–∞—Ç—å</button>
    `;
    historyStack.push('playGuessNumber');
}

function guessNumber(correctNumber) {
    const guess = parseInt(document.getElementById('guessInput').value);
    if (guess === correctNumber) {
        const reward = Math.floor(75 * (1 + profile.level * 0.1));
        profile.coins += reward;
        let xp = profile.event && profile.event.effect === 'double_xp' ? 50 : 25;
        profile.xp += xp;
        showNotification(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
        checkLevelUp();
        showGames();
    } else {
        document.getElementById('main-content').innerHTML = `
            <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
            <h2>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üî¢</h2>
            <p>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ß–∏—Å–ª–æ –±—ã–ª–æ: ${correctNumber}</p>
        `;
    }
    updateProfile();
}

function startTreasureHunt() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const rewards = [50, 100, 150, 200];
    const reward = rewards[Math.floor(Math.random() * rewards.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â üîç</h2>
        <p>–°–æ–∫—Ä–æ–≤–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ! +${reward} –º–æ–Ω–µ—Ç</p>
    `;
    if (!historyStack.includes('startTreasureHunt')) {
        historyStack.push('startTreasureHunt');
    }
    const finalReward = Math.floor(reward * (1 + profile.level * 0.1));
    profile.coins += finalReward;
    let xp = profile.event && profile.event.effect === 'double_xp' ? 60 : 30;
    profile.xp += xp;
    profile.stats.treasure_hunts++;
    showNotification(`–°–æ–∫—Ä–æ–≤–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ! +${finalReward} –º–æ–Ω–µ—Ç ü™ô +${xp} XP`);
    checkAchievements();
    checkQuests('treasure_hunt');
    checkLevelUp();
    updateProfile();
}

function spinWheel() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const rewards = [10, 50, 100, 0, 200, 500];
    const reward = rewards[Math.floor(Math.random() * rewards.length)];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã üé°</h2>
        <p>–¢—ã –≤—ã–∏–≥—Ä–∞–ª: ${reward} –º–æ–Ω–µ—Ç!</p>
    `;
    if (!historyStack.includes('spinWheel')) {
        historyStack.push('spinWheel');
    }
    const finalReward = Math.floor(reward * (1 + profile.level * 0.1));
    profile.coins += finalReward;
    let xp = reward > 0 ? (profile.event && profile.event.effect === 'double_xp' ? 40 : 20) : 5;
    profile.xp += xp;
    profile.stats.roulette_games++;
    showNotification(`+${finalReward} –º–æ–Ω–µ—Ç! üéâ +${xp} XP`);
    checkAchievements();
    checkQuests('spin_wheel');
    checkLevelUp();
    updateProfile();
}

function earnCoins() {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const coins = Math.floor(50 * (1 + profile.earn_boost) * (1 + profile.level * 0.1));
    profile.coins += coins;
    let xp = profile.event && profile.event.effect === 'double_xp' ? 20 : 10;
    profile.xp += xp;
    profile.stats.quests_completed++;
    showNotification(`+${coins} –º–æ–Ω–µ—Ç! üí∏ +${xp} XP`);
    checkQuests('earn_coins');
    checkLevelUp();
    showEarn();
    updateProfile();
}

function checkAchievements() {
    const achievements = [
        { id: 'first_pet', name: '–ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü', condition: () => profile.stats.pets_summoned >= 1 },
        { id: 'game_master', name: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä', condition: () => profile.stats.game_wins >= 5 },
        { id: 'quest_hunter', name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–≤–µ—Å—Ç–∞–º–∏', condition: () => profile.stats.quests_completed >= 3 },
        { id: 'rich', name: '–ë–æ–≥–∞—á', condition: () => profile.coins >= 1000 },
        { id: 'treasure_seeker', name: '–ò—Å–∫–∞—Ç–µ–ª—å —Å–æ–∫—Ä–æ–≤–∏—â', condition: () => profile.stats.treasure_hunts >= 10 }
    ];
    achievements.forEach(a => {
        if (a.condition() && !profile.achievements.includes(a.name)) {
            profile.achievements.push(a.name);
            profile.coins += 100;
            profile.xp += 50;
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${a.name}! +100 –º–æ–Ω–µ—Ç üéâ +50 XP`);
            checkLevelUp();
        }
    });
    updateProfile();
}

function startQuest() {
    const quests = [
        { id: 'play_blackjack', description: '–°—ã–≥—Ä–∞–π –≤ –±–ª–µ–∫–¥–∂–µ–∫ 3 —Ä–∞–∑–∞', goal: 3, reward: 100 },
        { id: 'play_slots', description: '–°—ã–≥—Ä–∞–π –≤ —Å–ª–æ—Ç—ã 5 —Ä–∞–∑', goal: 5, reward: 150 },
        { id: 'summon_pet', description: '–ü—Ä–∏–∑–æ–≤–∏ 2 –ø–∏—Ç–æ–º—Ü–µ–≤', goal: 2, reward: 200 },
        { id: 'collect_items', description: '–°–æ–±–µ—Ä–∏ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤', goal: 5, reward: 100 },
        { id: 'win_games', description: '–í—ã–∏–≥—Ä–∞–π 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥', goal: 3, reward: 200 }
    ];
    const available = quests.filter(q => !profile.quests[q.id]);
    if (available.length) {
        const quest = available[Math.floor(Math.random() * available.length)];
        profile.quests[quest.id] = { description: quest.description, progress: 0, goal: quest.goal, reward: quest.reward };
        showNotification(`–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${quest.description}!`);
        showQuests();
        updateProfile();
    } else {
        showNotification('–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    }
}

function checkQuests(type) {
    if (profile.quests[type]) {
        profile.quests[type].progress++;
        if (profile.quests[type].prog