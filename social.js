// social.js
function showFriends() {
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–î—Ä—É–∑—å—è üë•</h2>
        ${profile.friends.length ? profile.friends.map(friend => `
            <p>${friend.username} (–£—Ä–æ–≤–µ–Ω—å ${friend.level}, –ú–æ–Ω–µ—Ç—ã: ${friend.coins})</p>
            <button class="action" onclick="sendGift('${friend.username}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (10 –º–æ–Ω–µ—Ç)</button>
        `).join('') : '<p>–ù–µ—Ç –¥—Ä—É–∑–µ–π</p>'}
        <p>–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞:</p>
        <input id="friendInput" type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞">
        <button class="action" onclick="addFriend()">–î–æ–±–∞–≤–∏—Ç—å</button>
    `;
    historyStack.push('showFriends');
}

function addFriend() {
    const friendName = document.getElementById('friendInput').value;
    if (friendName && friendName !== profile.username && !profile.friends.some(f => f.username === profile.username)) {
        profile.friends.push({ username: friendName, level: 1, coins: 100 });
        showNotification(`–î—Ä—É–≥ ${friendName} –¥–æ–±–∞–≤–ª–µ–Ω! üë•`);
    } else {
        showNotification('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞! üòø');
    }
    showFriends();
    updateProfile();
}

function sendGift(friendName) {
    const now = Date.now();
    const oneDay = 24 * 60 * 60 * 1000;
    if (now - profile.lastGiftSent < oneDay) {
        showNotification('–ü–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å! ‚è≥');
        return;
    }
    if (profile.coins >= 10) {
        profile.coins -= 10;
        profile.lastGiftSent = now;
        showNotification(`–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${friendName}! üéÅ`);
        showFriends();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function showTournaments() {
    const now = Date.now();
    const oneDay = 24 * 60 * 60 * 1000;
    if (!profile.tournament || profile.tournament.end < now) {
        profile.tournament = {
            type: 'blackjack',
            scores: [{ username: profile.username, score: 0 }],
            end: now + oneDay
        };
    }
    const userScore = profile.tournament.scores.find(s => s.username === profile.username)?.score || 0;
    const top3 = profile.tournament.scores.sort((a, b) => b.score - a.score).slice(0, 3);
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–¢—É—Ä–Ω–∏—Ä –ø–æ –±–ª–µ–∫–¥–∂–µ–∫—É üèÜ</h2>
        <p>–¢–≤–æ–π —Å—á—ë—Ç: ${userScore}</p>
        <p>–¢–æ–ø-3:</p>
        ${top3.map((s, i) => `<p>${i + 1}. ${s.username}: ${s.score}</p>`).join('')}
        <p>–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: ${Math.floor((profile.tournament.end - now) / (1000 * 60))} –º–∏–Ω—É—Ç</p>
        <button class="action" onclick="playBlackjack(true)">–ò–≥—Ä–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ</button>
    `;
    historyStack.push('showTournaments');
}

function showSeasonPass() {
    const tasks = [
        { id: 'play_games', description: '–°—ã–≥—Ä–∞–π 10 –∏–≥—Ä', goal: 10, reward: 100 },
        { id: 'earn_coins', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π 500 –º–æ–Ω–µ—Ç', goal: 500, reward: 150 }
    ];
    const passRewards = [
        { level: 1, reward: '100 –º–æ–Ω–µ—Ç' },
        { level: 2, reward: '–†–µ–¥–∫–∏–π –ø–∏—Ç–æ–º–µ—Ü' },
        { level: 3, reward: '200 –º–æ–Ω–µ—Ç' }
    ];
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ üéüÔ∏è</h2>
        <p>–£—Ä–æ–≤–µ–Ω—å: ${profile.seasonPass.level}</p>
        <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${profile.seasonPass.progress}/100</p>
        <p>–ó–∞–¥–∞–Ω–∏—è:</p>
        ${tasks.map(task => `<p>${task.description}</p>`).join('')}
        <p>–ù–∞–≥—Ä–∞–¥—ã:</p>
        ${passRewards.map(r => `<p>–£—Ä–æ–≤–µ–Ω—å ${r.level}: ${r.reward} ${profile.seasonPass.level >= r.level ? '(–ü–æ–ª—É—á–µ–Ω–æ)' : ''}</p>`).join('')}
    `;
    historyStack.push('showSeasonPass');
}

function checkSeasonPass(type) {
    if (type === 'play_blackjack' || type === 'play_slots') {
        profile.seasonPass.progress += 10;
        if (profile.seasonPass.progress >= 100) {
            profile.seasonPass.level++;
            profile.seasonPass.progress = 0;
            if (profile.seasonPass.level === 2) {
                profile.pets.push({ name: '–†–µ–¥–∫–∏–π –ø–∏—Ç–æ–º–µ—Ü', level: 1, rarity: '—Ä–µ–¥–∫–∏–π' });
                showNotification('–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫: –ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∫–∏–π –ø–∏—Ç–æ–º–µ—Ü! üêæ');
            } else {
                profile.coins += 100 * profile.seasonPass.level;
                showNotification(`–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫: –£—Ä–æ–≤–µ–Ω—å ${profile.seasonPass.level}! +${100 * profile.seasonPass.level} –º–æ–Ω–µ—Ç üéâ`);
            }
        }
        updateProfile();
    }
}

// –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ social.js