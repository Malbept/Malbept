// game-base.js
function summonPet() {
    const cost = profile.event && profile.event.effect === 'pet_discount' ? 25 : 50;
    if (profile.coins >= cost) {
        profile.coins -= cost;
        const rarities = ['–æ–±—ã—á–Ω—ã–π', '—Ä–µ–¥–∫–∏–π', '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'];
        const rarity = Math.random() < 0.1 ? (Math.random() < 0.5 ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π') : '–æ–±—ã—á–Ω—ã–π';
        profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: rarity });
        profile.stats.pets_summoned++;
        profile.xp += 10;
        showNotification(`–ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–∑–≤–∞–Ω (${rarity})! üêæ +10 XP`);
        checkAchievements();
        checkQuests('summon_pet');
        checkLevelUp();
        showPets();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function trainPet(index) {
    if (profile.coins >= 50) {
        profile.coins -= 50;
        profile.pets[index].level++;
        showNotification(`${profile.pets[index].name} –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${profile.pets[index].level}! üêæ`);
        showPets();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function startPetRace(index) {
    updateEnergy();
    if (profile.energy < 1) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! ‚ö°');
        return;
    }
    profile.energy--;
    const petLevel = profile.pets[index].level;
    const chance = petLevel * 10;
    const win = Math.random() * 100 < chance;
    document.getElementById('main-content').innerHTML = `
        <button class="back-button" onclick="goBack()">–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è</button>
        <h2>–ì–æ–Ω–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ üèÅ</h2>
        <p>${profile.pets[index].name} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–Ω–∫–µ!</p>
        <p>${win ? '–ü–æ–±–µ–¥–∞! +50 –º–æ–Ω–µ—Ç üèÜ' : '–ü—Ä–æ–∏–≥—Ä—ã—à! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üèÅ'}</p>
    `;
    if (win) {
        const reward = Math.floor(50 * (1 + profile.level * 0.1));
        profile.coins += reward;
        profile.xp += 20;
        showNotification(`–ü–æ–±–µ–¥–∞ –≤ –≥–æ–Ω–∫–µ! +${reward} –º–æ–Ω–µ—Ç üéâ +20 XP`);
        checkLevelUp();
    }
    updateProfile();
}

function buyItem(item) {
    const costs = { '–ü–∏—Ç–æ–º–µ—Ü': profile.event && profile.event.effect === 'pet_discount' ? 50 : 100, '–ü—Ä–µ–¥–º–µ—Ç': 50, '–ë—É—Å—Ç XP': 200, '–°—É–Ω–¥—É–∫': 300 };
    const discount = Math.random() < 0.5 ? '–ü–∏—Ç–æ–º–µ—Ü' : '–ü—Ä–µ–¥–º–µ—Ç';
    if (discount === '–ü–∏—Ç–æ–º–µ—Ü') costs['–ü–∏—Ç–æ–º–µ—Ü'] = Math.floor(costs['–ü–∏—Ç–æ–º–µ—Ü'] * 0.8);
    if (discount === '–ü—Ä–µ–¥–º–µ—Ç') costs['–ü—Ä–µ–¥–º–µ—Ç'] = Math.floor(costs['–ü—Ä–µ–¥–º–µ—Ç'] * 0.8);
    if (profile.coins >= costs[item]) {
        profile.coins -= costs[item];
        if (item === '–ü–∏—Ç–æ–º–µ—Ü') {
            const rarities = ['–æ–±—ã—á–Ω—ã–π', '—Ä–µ–¥–∫–∏–π', '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'];
            const rarity = Math.random() < 0.1 ? (Math.random() < 0.5 ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π') : '–æ–±—ã—á–Ω—ã–π';
            profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: rarity });
            profile.stats.pets_summoned++;
        } else if (item === '–ü—Ä–µ–¥–º–µ—Ç') {
            profile.items.push(`–ü—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            profile.stats.items_collected++;
        } else if (item === '–ë—É—Å—Ç XP') {
            profile.earn_boost += 0.5;
            setTimeout(() => profile.earn_boost -= 0.5, 3600000);
        } else if (item === '–°—É–Ω–¥—É–∫') {
            const rewards = ['100 –º–æ–Ω–µ—Ç', '–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', '–ü–∏—Ç–æ–º–µ—Ü'];
            const reward = rewards[Math.floor(Math.random() * rewards.length)];
            if (reward === '100 –º–æ–Ω–µ—Ç') {
                profile.coins += 100;
            } else if (reward === '–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç') {
                profile.items.push(`–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            } else {
                profile.pets.push({ name: `–ü–∏—Ç–æ–º–µ—Ü ${profile.pets.length + 1}`, level: 1, rarity: '—Ä–µ–¥–∫–∏–π' });
            }
            showNotification(`–ò–∑ —Å—É–Ω–¥—É–∫–∞ –≤—ã–ø–∞–ª–æ: ${reward}! üéÅ`);
        }
        profile.xp += 20;
        showNotification(`–ö—É–ø–ª–µ–Ω ${item}! üéâ +20 XP`);
        checkAchievements();
        checkQuests('buy_item');
        checkLevelUp();
        showShop();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function sellItem(index) {
    const item = profile.items[index];
    profile.items.splice(index, 1);
    profile.marketItems.push({ item: item, price: 50, seller: profile.username });
    showNotification(`${item} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫! üì¶`);
    showInventory();
    updateProfile();
}

function buyMarketItem(index) {
    const marketItem = profile.marketItems[index];
    if (profile.coins >= marketItem.price) {
        profile.coins -= marketItem.price;
        profile.items.push(marketItem.item);
        profile.marketItems.splice(index, 1);
        showNotification(`–ö—É–ø–ª–µ–Ω ${marketItem.item}! üéâ`);
        showMarket();
        updateProfile();
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞');
    }
}

function checkLevelUp() {
    const requiredXP = profile.level * 100;
    while (profile.xp >= requiredXP) {
        profile.xp -= requiredXP;
        profile.level++;
        profile.coins += 50;
        showNotification(`–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ${profile.level}! üéâ +50 –º–æ–Ω–µ—Ç`);
        if (Math.random() < 0.1) {
            profile.items.push(`–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç ${profile.items.length + 1}`);
            showNotification('–ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç! ‚ú®');
        }
        if (profile.level % 5 === 0) {
            profile.background = `background${profile.level / 5}`;
            showNotification(`–ù–æ–≤—ã–π —Ñ–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è! üåü`);
        }
    }
    saveProfile();
}

function checkAchievements() {
    const achievements = [
        { id: 'first_pet', name: '–ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü', condition: () => profile.stats.pets_summoned >= 1 },
        { id: 'game_master', name: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä', condition: () => profile.stats.game_wins >= 5 },
        { id: 'quest_hunter', name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–≤–µ—Å—Ç–∞–º–∏', condition: () => profile.stats.quests_completed >= 3 },
        { id: 'rich', name: '–ë–æ–≥–∞—á', condition: () => profile.coins >= 1000 },
        { id: 'treasure_seeker', name: '–ò—Å–∫–∞—Ç–µ–ª—å —Å–æ–∫—Ä–æ–≤–∏—â', condition: () => profile.stats.treasure_hunts >= 10 }
    ];
    achievements.forEach(a => {
        if (a.condition() && !profile.achievements.includes(a.name)) {
            profile.achievements.push(a.name);
            profile.coins += 100;
            profile.xp += 50;
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${a.name}! +100 –º–æ–Ω–µ—Ç üéâ +50 XP`);
            checkLevelUp();
        }
    });
    updateProfile();
}

function startQuest() {
    const quests = [
        { id: 'play_blackjack', description: '–°—ã–≥—Ä–∞–π –≤ –±–ª–µ–∫–¥–∂–µ–∫ 3 —Ä–∞–∑–∞', goal: 3, reward: 100 },
        { id: 'play_slots', description: '–°—ã–≥—Ä–∞–π –≤ —Å–ª–æ—Ç—ã 5 —Ä–∞–∑', goal: 5, reward: 150 },
        { id: 'summon_pet', description: '–ü—Ä–∏–∑–æ–≤–∏ 2 –ø–∏—Ç–æ–º—Ü–µ–≤', goal: 2, reward: 200 },
        { id: 'collect_items', description: '–°–æ–±–µ—Ä–∏ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤', goal: 5, reward: 100 },
        { id: 'win_games', description: '–í—ã–∏–≥—Ä–∞–π 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥', goal: 3, reward: 200 }
    ];
    const available = quests.filter(q => !profile.quests[q.id]);
    if (available.length) {
        const quest = available[Math.floor(Math.random() * available.length)];
        profile.quests[quest.id] = { description: quest.description, progress: 0, goal: quest.goal, reward: quest.reward };
        showNotification(`–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${quest.description}!`);
        showQuests();
        updateProfile();
    } else {
        showNotification('–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    }
}

function checkQuests(type) {
    if (profile.quests[type]) {
        profile.quests[type].progress++;
        if (profile.quests[type].progress >= profile.quests[type].goal) {
            const reward = Math.floor(profile.quests[type].reward * (1 + profile.level * 0.1));
            profile.coins += reward;
            let xp = profile.event && profile.event.effect === 'double_xp' ? 100 : 50;
            profile.xp += xp;
            profile.stats.quests_completed++;
            showNotification(`–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${profile.quests[type].description}! +${reward} –º–æ–Ω–µ—Ç üéâ +${xp} XP`);
            delete profile.quests[type];
            checkAchievements();
            checkLevelUp();
        }
        updateProfile();
    }
}

// –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ game-base.js